/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from '.';

interface ParameterStoreInterface extends Interface {
  functions: {
    proposals: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    initialized: TypedFunctionDescription<{ encode([]: []): string }>;

    params: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    init: TypedFunctionDescription<{ encode([]: []): string }>;

    get: TypedFunctionDescription<{ encode([_name]: [string]): string }>;

    getAsUint: TypedFunctionDescription<{ encode([_name]: [string]): string }>;

    getAsAddress: TypedFunctionDescription<{
      encode([_name]: [string]): string;
    }>;

    setInitialValue: TypedFunctionDescription<{
      encode([_name, _value]: [string, Arrayish]): string;
    }>;

    createProposal: TypedFunctionDescription<{
      encode([key, value, metadataHash]: [string, Arrayish, Arrayish]): string;
    }>;

    createManyProposals: TypedFunctionDescription<{
      encode([keys, values, metadataHashes]: [(string)[], (Arrayish)[], (Arrayish)[]]): string;
    }>;

    setValue: TypedFunctionDescription<{
      encode([proposalID]: [BigNumberish]): string;
    }>;

    proposalCount: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ProposalCreated: TypedEventDescription<{
      encodeTopics([proposalID, proposer, requestID, key, value, metadataHash]: [
        null,
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    Initialized: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    ParameterSet: TypedEventDescription<{
      encodeTopics([name, key, value]: [null, null, null]): string[];
    }>;

    ProposalAccepted: TypedEventDescription<{
      encodeTopics([proposalID, key, value]: [null, null, null]): string[];
    }>;
  };
}

export class ParameterStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ParameterStore;
  attach(addressOrName: string): ParameterStore;
  deployed(): Promise<ParameterStore>;

  on(event: EventFilter | string, listener: Listener): ParameterStore;
  once(event: EventFilter | string, listener: Listener): ParameterStore;
  addListener(eventName: EventFilter | string, listener: Listener): ParameterStore;
  removeAllListeners(eventName: EventFilter | string): ParameterStore;
  removeListener(eventName: any, listener: Listener): ParameterStore;

  interface: ParameterStoreInterface;

  functions: {
    proposals(
      arg0: BigNumberish
    ): Promise<{
      gatekeeper: string;
      requestID: BigNumber;
      key: string;
      value: string;
      metadataHash: string;
      executed: boolean;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: boolean;
    }>;

    initialized(): Promise<boolean>;

    params(arg0: Arrayish): Promise<string>;

    init(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    get(_name: string): Promise<string>;

    getAsUint(_name: string): Promise<BigNumber>;

    getAsAddress(_name: string): Promise<string>;

    setInitialValue(
      _name: string,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createProposal(
      key: string,
      value: Arrayish,
      metadataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createManyProposals(
      keys: (string)[],
      values: (Arrayish)[],
      metadataHashes: (Arrayish)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setValue(
      proposalID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    proposalCount(): Promise<BigNumber>;
  };

  proposals(
    arg0: BigNumberish
  ): Promise<{
    gatekeeper: string;
    requestID: BigNumber;
    key: string;
    value: string;
    metadataHash: string;
    executed: boolean;
    0: string;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
    5: boolean;
  }>;

  initialized(): Promise<boolean>;

  params(arg0: Arrayish): Promise<string>;

  init(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  get(_name: string): Promise<string>;

  getAsUint(_name: string): Promise<BigNumber>;

  getAsAddress(_name: string): Promise<string>;

  setInitialValue(
    _name: string,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createProposal(
    key: string,
    value: Arrayish,
    metadataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createManyProposals(
    keys: (string)[],
    values: (Arrayish)[],
    metadataHashes: (Arrayish)[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setValue(
    proposalID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  proposalCount(): Promise<BigNumber>;

  filters: {
    ProposalCreated(
      proposalID: null,
      proposer: string | null,
      requestID: null,
      key: null,
      value: null,
      metadataHash: null
    ): EventFilter;

    Initialized(): EventFilter;

    ParameterSet(name: null, key: null, value: null): EventFilter;

    ProposalAccepted(proposalID: null, key: null, value: null): EventFilter;
  };

  estimate: {
    proposals(arg0: BigNumberish): Promise<BigNumber>;

    initialized(): Promise<BigNumber>;

    params(arg0: Arrayish): Promise<BigNumber>;

    init(): Promise<BigNumber>;

    get(_name: string): Promise<BigNumber>;

    getAsUint(_name: string): Promise<BigNumber>;

    getAsAddress(_name: string): Promise<BigNumber>;

    setInitialValue(_name: string, _value: Arrayish): Promise<BigNumber>;

    createProposal(key: string, value: Arrayish, metadataHash: Arrayish): Promise<BigNumber>;

    createManyProposals(
      keys: (string)[],
      values: (Arrayish)[],
      metadataHashes: (Arrayish)[]
    ): Promise<BigNumber>;

    setValue(proposalID: BigNumberish): Promise<BigNumber>;

    proposalCount(): Promise<BigNumber>;
  };
}
