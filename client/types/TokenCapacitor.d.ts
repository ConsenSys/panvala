/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from 'ethers';
import { Provider } from 'ethers/providers';
import { BigNumber } from 'ethers/utils';
import { TransactionOverrides } from '.';

export class TokenCapacitor extends Contract {
  functions: {
    proposals(
      arg0: number | string | BigNumber
    ): Promise<{
      tokens: BigNumber;
      to: string;
      metadataHash: (string)[];
      withdrawn: boolean;
      0: BigNumber;
      1: string;
      2: (string)[];
      3: boolean;
    }>;

    createProposal(
      to: string,
      tokens: number | string | BigNumber,
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createManyProposals(
      beneficiaries: (string)[],
      tokenAmounts: (number | string | BigNumber)[],
      metadataHashes: (Buffer)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawTokens(
      proposalID: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    donate(
      donor: string,
      tokens: number | string | BigNumber,
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    parameters(): Promise<string>;
    proposalCount(): Promise<BigNumber>;
  };
  filters: {
    ProposalCreated(
      proposer: string | null,
      requestID: number | string | BigNumber | null,
      to: string | null,
      tokens: null,
      metadataHash: null
    ): EventFilter;

    TokensWithdrawn(proposalID: null, to: string | null, numTokens: null): EventFilter;

    Donation(
      payer: string | null,
      donor: string | null,
      numTokens: null,
      metadataHash: null
    ): EventFilter;
  };
}
