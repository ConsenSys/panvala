/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from 'ethers';
import { Provider } from 'ethers/providers';
import { BigNumber } from 'ethers/utils';
import { TransactionOverrides } from '.';

export class TokenCapacitor extends Contract {
  functions: {
    proposals(
      arg0: number | string | BigNumber
    ): Promise<{
      gatekeeper: string;
      requestID: BigNumber;
      tokens: BigNumber;
      to: string;
      metadataHash: (string)[];
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: (string)[];
      5: boolean;
    }>;

    projectedUnlockedBalance(time: number | string | BigNumber): Promise<BigNumber>;

    projectedLockedBalance(time: number | string | BigNumber): Promise<BigNumber>;

    calculateDecay(_days: number | string | BigNumber): Promise<BigNumber>;

    createProposal(
      to: string,
      tokens: number | string | BigNumber,
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createManyProposals(
      beneficiaries: (string)[],
      tokenAmounts: (number | string | BigNumber)[],
      metadataHashes: ((string)[])[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawTokens(
      proposalID: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    donate(
      donor: string,
      tokens: number | string | BigNumber,
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateBalances(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    parameters(): Promise<string>;
    lastLockedTime(): Promise<BigNumber>;
    lifetimeReleasedTokens(): Promise<BigNumber>;
    unlockedBalance(): Promise<BigNumber>;
    lastLockedBalance(): Promise<BigNumber>;
    SCALE(): Promise<BigNumber>;
    token(): Promise<string>;
    proposalCount(): Promise<BigNumber>;
  };
  filters: {
    ProposalCreated(
      proposalID: null,
      proposer: string | null,
      requestID: null,
      recipient: string | null,
      tokens: null,
      metadataHash: null
    ): EventFilter;

    TokensWithdrawn(proposalID: null, to: string | null, numTokens: null): EventFilter;

    BalancesUpdated(
      unlockedBalance: null,
      lastLockedBalance: null,
      lastLockedTime: null,
      totalBalance: null
    ): EventFilter;

    Donation(
      payer: string | null,
      donor: string | null,
      numTokens: null,
      metadataHash: null
    ): EventFilter;
  };
}
