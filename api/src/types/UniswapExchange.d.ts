/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from '.';

interface UniswapExchangeInterface extends Interface {
  functions: {
    setup: TypedFunctionDescription<{ encode([token_addr]: [string]): string }>;

    addLiquidity: TypedFunctionDescription<{
      encode([min_liquidity, max_tokens, deadline]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    removeLiquidity: TypedFunctionDescription<{
      encode([amount, min_eth, min_tokens, deadline]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    __default__: TypedFunctionDescription<{ encode([]: []): string }>;

    ethToTokenSwapInput: TypedFunctionDescription<{
      encode([min_tokens, deadline]: [BigNumberish, BigNumberish]): string;
    }>;

    ethToTokenTransferInput: TypedFunctionDescription<{
      encode([min_tokens, deadline, recipient]: [BigNumberish, BigNumberish, string]): string;
    }>;

    ethToTokenSwapOutput: TypedFunctionDescription<{
      encode([tokens_bought, deadline]: [BigNumberish, BigNumberish]): string;
    }>;

    ethToTokenTransferOutput: TypedFunctionDescription<{
      encode([tokens_bought, deadline, recipient]: [BigNumberish, BigNumberish, string]): string;
    }>;

    tokenToEthSwapInput: TypedFunctionDescription<{
      encode([tokens_sold, min_eth, deadline]: [BigNumberish, BigNumberish, BigNumberish]): string;
    }>;

    tokenToEthTransferInput: TypedFunctionDescription<{
      encode([tokens_sold, min_eth, deadline, recipient]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToEthSwapOutput: TypedFunctionDescription<{
      encode([eth_bought, max_tokens, deadline]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    tokenToEthTransferOutput: TypedFunctionDescription<{
      encode([eth_bought, max_tokens, deadline, recipient]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToTokenSwapInput: TypedFunctionDescription<{
      encode([tokens_sold, min_tokens_bought, min_eth_bought, deadline, token_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToTokenTransferInput: TypedFunctionDescription<{
      encode([tokens_sold, min_tokens_bought, min_eth_bought, deadline, recipient, token_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    tokenToTokenSwapOutput: TypedFunctionDescription<{
      encode([tokens_bought, max_tokens_sold, max_eth_sold, deadline, token_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToTokenTransferOutput: TypedFunctionDescription<{
      encode([tokens_bought, max_tokens_sold, max_eth_sold, deadline, recipient, token_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    tokenToExchangeSwapInput: TypedFunctionDescription<{
      encode([tokens_sold, min_tokens_bought, min_eth_bought, deadline, exchange_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToExchangeTransferInput: TypedFunctionDescription<{
      encode([tokens_sold, min_tokens_bought, min_eth_bought, deadline, recipient, exchange_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    tokenToExchangeSwapOutput: TypedFunctionDescription<{
      encode([tokens_bought, max_tokens_sold, max_eth_sold, deadline, exchange_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    tokenToExchangeTransferOutput: TypedFunctionDescription<{
      encode([tokens_bought, max_tokens_sold, max_eth_sold, deadline, recipient, exchange_addr]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    getEthToTokenInputPrice: TypedFunctionDescription<{
      encode([eth_sold]: [BigNumberish]): string;
    }>;

    getEthToTokenOutputPrice: TypedFunctionDescription<{
      encode([tokens_bought]: [BigNumberish]): string;
    }>;

    getTokenToEthInputPrice: TypedFunctionDescription<{
      encode([tokens_sold]: [BigNumberish]): string;
    }>;

    getTokenToEthOutputPrice: TypedFunctionDescription<{
      encode([eth_bought]: [BigNumberish]): string;
    }>;

    tokenAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    factoryAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([_owner]: [string]): string }>;

    transfer: TypedFunctionDescription<{
      encode([_to, _value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([_from, _to, _value]: [string, string, BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([_spender, _value]: [string, BigNumberish]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([_owner, _spender]: [string, string]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    TokenPurchase: TypedEventDescription<{
      encodeTopics([buyer, eth_sold, tokens_bought]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    EthPurchase: TypedEventDescription<{
      encodeTopics([buyer, tokens_sold, eth_bought]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    AddLiquidity: TypedEventDescription<{
      encodeTopics([provider, eth_amount, token_amount]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    RemoveLiquidity: TypedEventDescription<{
      encodeTopics([provider, eth_amount, token_amount]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([_from, _to, _value]: [string | null, string | null, null]): string[];
    }>;

    Approval: TypedEventDescription<{
      encodeTopics([_owner, _spender, _value]: [string | null, string | null, null]): string[];
    }>;
  };
}

export class UniswapExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UniswapExchange;
  attach(addressOrName: string): UniswapExchange;
  deployed(): Promise<UniswapExchange>;

  on(event: EventFilter | string, listener: Listener): UniswapExchange;
  once(event: EventFilter | string, listener: Listener): UniswapExchange;
  addListener(eventName: EventFilter | string, listener: Listener): UniswapExchange;
  removeAllListeners(eventName: EventFilter | string): UniswapExchange;
  removeListener(eventName: any, listener: Listener): UniswapExchange;

  interface: UniswapExchangeInterface;

  functions: {
    setup(token_addr: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    __default__(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    ethToTokenSwapInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ethToTokenSwapOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getEthToTokenInputPrice(eth_sold: BigNumberish): Promise<BigNumber>;

    getEthToTokenOutputPrice(tokens_bought: BigNumberish): Promise<BigNumber>;

    getTokenToEthInputPrice(tokens_sold: BigNumberish): Promise<BigNumber>;

    getTokenToEthOutputPrice(eth_bought: BigNumberish): Promise<BigNumber>;

    tokenAddress(): Promise<string>;

    factoryAddress(): Promise<string>;

    balanceOf(_owner: string): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allowance(_owner: string, _spender: string): Promise<BigNumber>;

    name(): Promise<string>;

    symbol(): Promise<string>;

    decimals(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;
  };

  setup(token_addr: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  addLiquidity(
    min_liquidity: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    min_eth: BigNumberish,
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  __default__(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  ethToTokenSwapInput(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ethToTokenTransferInput(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ethToTokenSwapOutput(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ethToTokenTransferOutput(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToEthSwapInput(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToEthTransferInput(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToEthSwapOutput(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToEthTransferOutput(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToTokenSwapInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToTokenTransferInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToTokenSwapOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToTokenTransferOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToExchangeSwapInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToExchangeTransferInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToExchangeSwapOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenToExchangeTransferOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getEthToTokenInputPrice(eth_sold: BigNumberish): Promise<BigNumber>;

  getEthToTokenOutputPrice(tokens_bought: BigNumberish): Promise<BigNumber>;

  getTokenToEthInputPrice(tokens_sold: BigNumberish): Promise<BigNumber>;

  getTokenToEthOutputPrice(eth_bought: BigNumberish): Promise<BigNumber>;

  tokenAddress(): Promise<string>;

  factoryAddress(): Promise<string>;

  balanceOf(_owner: string): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allowance(_owner: string, _spender: string): Promise<BigNumber>;

  name(): Promise<string>;

  symbol(): Promise<string>;

  decimals(): Promise<BigNumber>;

  totalSupply(): Promise<BigNumber>;

  filters: {
    TokenPurchase(
      buyer: string | null,
      eth_sold: BigNumberish | null,
      tokens_bought: BigNumberish | null
    ): EventFilter;

    EthPurchase(
      buyer: string | null,
      tokens_sold: BigNumberish | null,
      eth_bought: BigNumberish | null
    ): EventFilter;

    AddLiquidity(
      provider: string | null,
      eth_amount: BigNumberish | null,
      token_amount: BigNumberish | null
    ): EventFilter;

    RemoveLiquidity(
      provider: string | null,
      eth_amount: BigNumberish | null,
      token_amount: BigNumberish | null
    ): EventFilter;

    Transfer(_from: string | null, _to: string | null, _value: null): EventFilter;

    Approval(_owner: string | null, _spender: string | null, _value: null): EventFilter;
  };

  estimate: {
    setup(token_addr: string): Promise<BigNumber>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish
    ): Promise<BigNumber>;

    __default__(): Promise<BigNumber>;

    ethToTokenSwapInput(min_tokens: BigNumberish, deadline: BigNumberish): Promise<BigNumber>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(tokens_bought: BigNumberish, deadline: BigNumberish): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string
    ): Promise<BigNumber>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string
    ): Promise<BigNumber>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string
    ): Promise<BigNumber>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string
    ): Promise<BigNumber>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string
    ): Promise<BigNumber>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string
    ): Promise<BigNumber>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string
    ): Promise<BigNumber>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string
    ): Promise<BigNumber>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(eth_sold: BigNumberish): Promise<BigNumber>;

    getEthToTokenOutputPrice(tokens_bought: BigNumberish): Promise<BigNumber>;

    getTokenToEthInputPrice(tokens_sold: BigNumberish): Promise<BigNumber>;

    getTokenToEthOutputPrice(eth_bought: BigNumberish): Promise<BigNumber>;

    tokenAddress(): Promise<BigNumber>;

    factoryAddress(): Promise<BigNumber>;

    balanceOf(_owner: string): Promise<BigNumber>;

    transfer(_to: string, _value: BigNumberish): Promise<BigNumber>;

    transferFrom(_from: string, _to: string, _value: BigNumberish): Promise<BigNumber>;

    approve(_spender: string, _value: BigNumberish): Promise<BigNumber>;

    allowance(_owner: string, _spender: string): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;
  };
}
