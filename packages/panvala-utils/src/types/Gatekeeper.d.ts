/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from '.';

interface GatekeeperInterface extends Interface {
  functions: {
    voteTokenBalance: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    delegate: TypedFunctionDescription<{ encode([]: [string]): string }>;

    ballots: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    startTime: TypedFunctionDescription<{ encode([]: []): string }>;

    COMMIT_PERIOD_START: TypedFunctionDescription<{ encode([]: []): string }>;

    requests: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    parameters: TypedFunctionDescription<{ encode([]: []): string }>;

    REVEAL_PERIOD_START: TypedFunctionDescription<{ encode([]: []): string }>;

    EPOCH_LENGTH: TypedFunctionDescription<{ encode([]: []): string }>;

    incumbent: TypedFunctionDescription<{ encode([]: [string]): string }>;

    SLATE_SUBMISSION_PERIOD_START: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    token: TypedFunctionDescription<{ encode([]: []): string }>;

    slates: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    currentEpochNumber: TypedFunctionDescription<{ encode([]: []): string }>;

    epochStart: TypedFunctionDescription<{
      encode([epoch]: [BigNumberish]): string;
    }>;

    recommendSlate: TypedFunctionDescription<{
      encode([resource, requestIDs, metadataHash]: [string, BigNumberish[], Arrayish]): string;
    }>;

    slateRequests: TypedFunctionDescription<{
      encode([slateID]: [BigNumberish]): string;
    }>;

    stakeTokens: TypedFunctionDescription<{
      encode([slateID]: [BigNumberish]): string;
    }>;

    withdrawStake: TypedFunctionDescription<{
      encode([slateID]: [BigNumberish]): string;
    }>;

    depositVoteTokens: TypedFunctionDescription<{
      encode([numTokens]: [BigNumberish]): string;
    }>;

    withdrawVoteTokens: TypedFunctionDescription<{
      encode([numTokens]: [BigNumberish]): string;
    }>;

    delegateVotingRights: TypedFunctionDescription<{
      encode([_delegate]: [string]): string;
    }>;

    commitBallot: TypedFunctionDescription<{
      encode([voter, commitHash, numTokens]: [string, Arrayish, BigNumberish]): string;
    }>;

    didCommit: TypedFunctionDescription<{
      encode([epochNumber, voter]: [BigNumberish, string]): string;
    }>;

    getCommitHash: TypedFunctionDescription<{
      encode([epochNumber, voter]: [BigNumberish, string]): string;
    }>;

    revealBallot: TypedFunctionDescription<{
      encode([epochNumber, voter, resources, firstChoices, secondChoices, salt]: [
        BigNumberish,
        string,
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    revealManyBallots: TypedFunctionDescription<{
      encode([epochNumber, _voters, _ballots, _salts]: [
        BigNumberish,
        string[],
        Arrayish[],
        BigNumberish[]
      ]): string;
    }>;

    getFirstChoiceVotes: TypedFunctionDescription<{
      encode([epochNumber, resource, slateID]: [BigNumberish, string, BigNumberish]): string;
    }>;

    getSecondChoiceVotes: TypedFunctionDescription<{
      encode([epochNumber, resource, slateID]: [BigNumberish, string, BigNumberish]): string;
    }>;

    didReveal: TypedFunctionDescription<{
      encode([epochNumber, voter]: [BigNumberish, string]): string;
    }>;

    finalizeContest: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    contestStatus: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    contestSlates: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    contestDetails: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    donateChallengerStakes: TypedFunctionDescription<{
      encode([epochNumber, resource, startIndex, count]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getWinningSlate: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    requestPermission: TypedFunctionDescription<{
      encode([metadataHash]: [Arrayish]): string;
    }>;

    hasPermission: TypedFunctionDescription<{
      encode([requestID]: [BigNumberish]): string;
    }>;

    slateCount: TypedFunctionDescription<{ encode([]: []): string }>;

    requestCount: TypedFunctionDescription<{ encode([]: []): string }>;

    slateSubmissionDeadline: TypedFunctionDescription<{
      encode([epochNumber, resource]: [BigNumberish, string]): string;
    }>;

    slateSubmissionPeriodActive: TypedFunctionDescription<{
      encode([resource]: [string]): string;
    }>;

    isCurrentGatekeeper: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    PermissionRequested: TypedEventDescription<{
      encodeTopics([epochNumber, resource, requestID, metadataHash]: [
        BigNumberish | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    SlateCreated: TypedEventDescription<{
      encodeTopics([slateID, recommender, requestIDs, metadataHash]: [
        null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    SlateStaked: TypedEventDescription<{
      encodeTopics([slateID, staker, numTokens]: [null, string | null, null]): string[];
    }>;

    VotingTokensDeposited: TypedEventDescription<{
      encodeTopics([voter, numTokens]: [string | null, null]): string[];
    }>;

    VotingTokensWithdrawn: TypedEventDescription<{
      encodeTopics([voter, numTokens]: [string | null, null]): string[];
    }>;

    VotingRightsDelegated: TypedEventDescription<{
      encodeTopics([voter, delegate]: [string | null, null]): string[];
    }>;

    BallotCommitted: TypedEventDescription<{
      encodeTopics([epochNumber, committer, voter, numTokens, commitHash]: [
        BigNumberish | null,
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    BallotRevealed: TypedEventDescription<{
      encodeTopics([epochNumber, voter, numTokens]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ContestAutomaticallyFinalized: TypedEventDescription<{
      encodeTopics([epochNumber, resource, winningSlate]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ContestFinalizedWithoutWinner: TypedEventDescription<{
      encodeTopics([epochNumber, resource]: [BigNumberish | null, string | null]): string[];
    }>;

    VoteFinalized: TypedEventDescription<{
      encodeTopics([epochNumber, resource, winningSlate, winnerVotes, totalVotes]: [
        BigNumberish | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    VoteFailed: TypedEventDescription<{
      encodeTopics([
        epochNumber,
        resource,
        leadingSlate,
        leaderVotes,
        runnerUpSlate,
        runnerUpVotes,
        totalVotes,
      ]: [BigNumberish | null, string | null, null, null, null, null, null]): string[];
    }>;

    RunoffFinalized: TypedEventDescription<{
      encodeTopics([epochNumber, resource, winningSlate, winnerVotes, losingSlate, loserVotes]: [
        BigNumberish | null,
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    StakeWithdrawn: TypedEventDescription<{
      encodeTopics([slateID, staker, numTokens]: [null, string | null, null]): string[];
    }>;
  };
}

export class Gatekeeper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Gatekeeper;
  attach(addressOrName: string): Gatekeeper;
  deployed(): Promise<Gatekeeper>;

  on(event: EventFilter | string, listener: Listener): Gatekeeper;
  once(event: EventFilter | string, listener: Listener): Gatekeeper;
  addListener(eventName: EventFilter | string, listener: Listener): Gatekeeper;
  removeAllListeners(eventName: EventFilter | string): Gatekeeper;
  removeListener(eventName: any, listener: Listener): Gatekeeper;

  interface: GatekeeperInterface;

  functions: {
    voteTokenBalance(arg0: string): Promise<BigNumber>;

    delegate(arg0: string): Promise<string>;

    ballots(arg0: BigNumberish): Promise<boolean>;

    startTime(): Promise<BigNumber>;

    COMMIT_PERIOD_START(): Promise<BigNumber>;

    requests(
      arg0: BigNumberish
    ): Promise<{
      metadataHash: string;
      resource: string;
      approved: boolean;
      expirationTime: BigNumber;
      epochNumber: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
      4: BigNumber;
    }>;

    parameters(): Promise<string>;

    REVEAL_PERIOD_START(): Promise<BigNumber>;

    EPOCH_LENGTH(): Promise<BigNumber>;

    incumbent(arg0: string): Promise<string>;

    SLATE_SUBMISSION_PERIOD_START(): Promise<BigNumber>;

    token(): Promise<string>;

    slates(
      arg0: BigNumberish
    ): Promise<{
      recommender: string;
      metadataHash: string;
      status: number;
      staker: string;
      stake: BigNumber;
      epochNumber: BigNumber;
      resource: string;
      0: string;
      1: string;
      2: number;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }>;

    currentEpochNumber(): Promise<BigNumber>;

    epochStart(epoch: BigNumberish): Promise<BigNumber>;

    recommendSlate(
      resource: string,
      requestIDs: BigNumberish[],
      metadataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    slateRequests(slateID: BigNumberish): Promise<BigNumber[]>;

    stakeTokens(
      slateID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawStake(
      slateID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositVoteTokens(
      numTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawVoteTokens(
      numTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    delegateVotingRights(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    commitBallot(
      voter: string,
      commitHash: Arrayish,
      numTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    didCommit(epochNumber: BigNumberish, voter: string): Promise<boolean>;

    getCommitHash(epochNumber: BigNumberish, voter: string): Promise<string>;

    revealBallot(
      epochNumber: BigNumberish,
      voter: string,
      resources: string[],
      firstChoices: BigNumberish[],
      secondChoices: BigNumberish[],
      salt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    revealManyBallots(
      epochNumber: BigNumberish,
      _voters: string[],
      _ballots: Arrayish[],
      _salts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getFirstChoiceVotes(
      epochNumber: BigNumberish,
      resource: string,
      slateID: BigNumberish
    ): Promise<BigNumber>;

    getSecondChoiceVotes(
      epochNumber: BigNumberish,
      resource: string,
      slateID: BigNumberish
    ): Promise<BigNumber>;

    didReveal(epochNumber: BigNumberish, voter: string): Promise<boolean>;

    finalizeContest(
      epochNumber: BigNumberish,
      resource: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    contestStatus(epochNumber: BigNumberish, resource: string): Promise<number>;

    contestSlates(epochNumber: BigNumberish, resource: string): Promise<BigNumber[]>;

    contestDetails(
      epochNumber: BigNumberish,
      resource: string
    ): Promise<{
      status: number;
      allSlates: BigNumber[];
      stakedSlates: BigNumber[];
      lastStaked: BigNumber;
      voteWinner: BigNumber;
      voteRunnerUp: BigNumber;
      winner: BigNumber;
      0: number;
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    donateChallengerStakes(
      epochNumber: BigNumberish,
      resource: string,
      startIndex: BigNumberish,
      count: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getWinningSlate(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    requestPermission(
      metadataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hasPermission(requestID: BigNumberish): Promise<boolean>;

    slateCount(): Promise<BigNumber>;

    requestCount(): Promise<BigNumber>;

    slateSubmissionDeadline(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    slateSubmissionPeriodActive(resource: string): Promise<boolean>;

    isCurrentGatekeeper(): Promise<boolean>;
  };

  voteTokenBalance(arg0: string): Promise<BigNumber>;

  delegate(arg0: string): Promise<string>;

  ballots(arg0: BigNumberish): Promise<boolean>;

  startTime(): Promise<BigNumber>;

  COMMIT_PERIOD_START(): Promise<BigNumber>;

  requests(
    arg0: BigNumberish
  ): Promise<{
    metadataHash: string;
    resource: string;
    approved: boolean;
    expirationTime: BigNumber;
    epochNumber: BigNumber;
    0: string;
    1: string;
    2: boolean;
    3: BigNumber;
    4: BigNumber;
  }>;

  parameters(): Promise<string>;

  REVEAL_PERIOD_START(): Promise<BigNumber>;

  EPOCH_LENGTH(): Promise<BigNumber>;

  incumbent(arg0: string): Promise<string>;

  SLATE_SUBMISSION_PERIOD_START(): Promise<BigNumber>;

  token(): Promise<string>;

  slates(
    arg0: BigNumberish
  ): Promise<{
    recommender: string;
    metadataHash: string;
    status: number;
    staker: string;
    stake: BigNumber;
    epochNumber: BigNumber;
    resource: string;
    0: string;
    1: string;
    2: number;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
  }>;

  currentEpochNumber(): Promise<BigNumber>;

  epochStart(epoch: BigNumberish): Promise<BigNumber>;

  recommendSlate(
    resource: string,
    requestIDs: BigNumberish[],
    metadataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  slateRequests(slateID: BigNumberish): Promise<BigNumber[]>;

  stakeTokens(
    slateID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawStake(
    slateID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  depositVoteTokens(
    numTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawVoteTokens(
    numTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  delegateVotingRights(
    _delegate: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  commitBallot(
    voter: string,
    commitHash: Arrayish,
    numTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  didCommit(epochNumber: BigNumberish, voter: string): Promise<boolean>;

  getCommitHash(epochNumber: BigNumberish, voter: string): Promise<string>;

  revealBallot(
    epochNumber: BigNumberish,
    voter: string,
    resources: string[],
    firstChoices: BigNumberish[],
    secondChoices: BigNumberish[],
    salt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  revealManyBallots(
    epochNumber: BigNumberish,
    _voters: string[],
    _ballots: Arrayish[],
    _salts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getFirstChoiceVotes(
    epochNumber: BigNumberish,
    resource: string,
    slateID: BigNumberish
  ): Promise<BigNumber>;

  getSecondChoiceVotes(
    epochNumber: BigNumberish,
    resource: string,
    slateID: BigNumberish
  ): Promise<BigNumber>;

  didReveal(epochNumber: BigNumberish, voter: string): Promise<boolean>;

  finalizeContest(
    epochNumber: BigNumberish,
    resource: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  contestStatus(epochNumber: BigNumberish, resource: string): Promise<number>;

  contestSlates(epochNumber: BigNumberish, resource: string): Promise<BigNumber[]>;

  contestDetails(
    epochNumber: BigNumberish,
    resource: string
  ): Promise<{
    status: number;
    allSlates: BigNumber[];
    stakedSlates: BigNumber[];
    lastStaked: BigNumber;
    voteWinner: BigNumber;
    voteRunnerUp: BigNumber;
    winner: BigNumber;
    0: number;
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  donateChallengerStakes(
    epochNumber: BigNumberish,
    resource: string,
    startIndex: BigNumberish,
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getWinningSlate(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

  requestPermission(
    metadataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hasPermission(requestID: BigNumberish): Promise<boolean>;

  slateCount(): Promise<BigNumber>;

  requestCount(): Promise<BigNumber>;

  slateSubmissionDeadline(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

  slateSubmissionPeriodActive(resource: string): Promise<boolean>;

  isCurrentGatekeeper(): Promise<boolean>;

  filters: {
    PermissionRequested(
      epochNumber: BigNumberish | null,
      resource: string | null,
      requestID: null,
      metadataHash: null
    ): EventFilter;

    SlateCreated(
      slateID: null,
      recommender: string | null,
      requestIDs: null,
      metadataHash: null
    ): EventFilter;

    SlateStaked(slateID: null, staker: string | null, numTokens: null): EventFilter;

    VotingTokensDeposited(voter: string | null, numTokens: null): EventFilter;

    VotingTokensWithdrawn(voter: string | null, numTokens: null): EventFilter;

    VotingRightsDelegated(voter: string | null, delegate: null): EventFilter;

    BallotCommitted(
      epochNumber: BigNumberish | null,
      committer: string | null,
      voter: string | null,
      numTokens: null,
      commitHash: null
    ): EventFilter;

    BallotRevealed(
      epochNumber: BigNumberish | null,
      voter: string | null,
      numTokens: null
    ): EventFilter;

    ContestAutomaticallyFinalized(
      epochNumber: BigNumberish | null,
      resource: string | null,
      winningSlate: null
    ): EventFilter;

    ContestFinalizedWithoutWinner(
      epochNumber: BigNumberish | null,
      resource: string | null
    ): EventFilter;

    VoteFinalized(
      epochNumber: BigNumberish | null,
      resource: string | null,
      winningSlate: null,
      winnerVotes: null,
      totalVotes: null
    ): EventFilter;

    VoteFailed(
      epochNumber: BigNumberish | null,
      resource: string | null,
      leadingSlate: null,
      leaderVotes: null,
      runnerUpSlate: null,
      runnerUpVotes: null,
      totalVotes: null
    ): EventFilter;

    RunoffFinalized(
      epochNumber: BigNumberish | null,
      resource: string | null,
      winningSlate: null,
      winnerVotes: null,
      losingSlate: null,
      loserVotes: null
    ): EventFilter;

    StakeWithdrawn(slateID: null, staker: string | null, numTokens: null): EventFilter;
  };

  estimate: {
    voteTokenBalance(arg0: string): Promise<BigNumber>;

    delegate(arg0: string): Promise<BigNumber>;

    ballots(arg0: BigNumberish): Promise<BigNumber>;

    startTime(): Promise<BigNumber>;

    COMMIT_PERIOD_START(): Promise<BigNumber>;

    requests(arg0: BigNumberish): Promise<BigNumber>;

    parameters(): Promise<BigNumber>;

    REVEAL_PERIOD_START(): Promise<BigNumber>;

    EPOCH_LENGTH(): Promise<BigNumber>;

    incumbent(arg0: string): Promise<BigNumber>;

    SLATE_SUBMISSION_PERIOD_START(): Promise<BigNumber>;

    token(): Promise<BigNumber>;

    slates(arg0: BigNumberish): Promise<BigNumber>;

    currentEpochNumber(): Promise<BigNumber>;

    epochStart(epoch: BigNumberish): Promise<BigNumber>;

    recommendSlate(
      resource: string,
      requestIDs: BigNumberish[],
      metadataHash: Arrayish
    ): Promise<BigNumber>;

    slateRequests(slateID: BigNumberish): Promise<BigNumber>;

    stakeTokens(slateID: BigNumberish): Promise<BigNumber>;

    withdrawStake(slateID: BigNumberish): Promise<BigNumber>;

    depositVoteTokens(numTokens: BigNumberish): Promise<BigNumber>;

    withdrawVoteTokens(numTokens: BigNumberish): Promise<BigNumber>;

    delegateVotingRights(_delegate: string): Promise<BigNumber>;

    commitBallot(voter: string, commitHash: Arrayish, numTokens: BigNumberish): Promise<BigNumber>;

    didCommit(epochNumber: BigNumberish, voter: string): Promise<BigNumber>;

    getCommitHash(epochNumber: BigNumberish, voter: string): Promise<BigNumber>;

    revealBallot(
      epochNumber: BigNumberish,
      voter: string,
      resources: string[],
      firstChoices: BigNumberish[],
      secondChoices: BigNumberish[],
      salt: BigNumberish
    ): Promise<BigNumber>;

    revealManyBallots(
      epochNumber: BigNumberish,
      _voters: string[],
      _ballots: Arrayish[],
      _salts: BigNumberish[]
    ): Promise<BigNumber>;

    getFirstChoiceVotes(
      epochNumber: BigNumberish,
      resource: string,
      slateID: BigNumberish
    ): Promise<BigNumber>;

    getSecondChoiceVotes(
      epochNumber: BigNumberish,
      resource: string,
      slateID: BigNumberish
    ): Promise<BigNumber>;

    didReveal(epochNumber: BigNumberish, voter: string): Promise<BigNumber>;

    finalizeContest(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    contestStatus(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    contestSlates(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    contestDetails(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    donateChallengerStakes(
      epochNumber: BigNumberish,
      resource: string,
      startIndex: BigNumberish,
      count: BigNumberish
    ): Promise<BigNumber>;

    getWinningSlate(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    requestPermission(metadataHash: Arrayish): Promise<BigNumber>;

    hasPermission(requestID: BigNumberish): Promise<BigNumber>;

    slateCount(): Promise<BigNumber>;

    requestCount(): Promise<BigNumber>;

    slateSubmissionDeadline(epochNumber: BigNumberish, resource: string): Promise<BigNumber>;

    slateSubmissionPeriodActive(resource: string): Promise<BigNumber>;

    isCurrentGatekeeper(): Promise<BigNumber>;
  };
}
